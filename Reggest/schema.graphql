# source: http://localhost:49891/graphql
# timestamp: Wed May 02 2018 23:23:23 GMT+0200 (W. Europe Daylight Time)

type Answer implements Node {
  """The Id of the Answer"""
  answerId: Int!

  """The Global Id of the Answer"""
  id: ID!

  """An answer to present to the user"""
  answerText: String!

  """The amount of points this answer gives"""
  points: Int!

  """The question associated with this answer"""
  question: Question
}

"""
The `Date` scalar type represents a timestamp provided in UTC. `Date` expects
timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

scalar Decimal

type FitnessPlan implements Node & Plan {
  """The Id of the FitnessPlan"""
  planId: Int!

  """The Global Id of the FitnessPlan"""
  id: ID!
  name: String!
  description: String!

  """The resources for this fitness plan, e.g. apps, workouts etc"""
  links: [Link]

  """The days per week to workout for this fitness plan"""
  workoutDaysPerWeek: [Int]

  """The time the workout takes in hours/minutes"""
  timeToWorkout: TimeToWorkout

  """The different types of variations of this fitness plan."""
  variationPlans: [VariationPlan]
}

"""Provides ordering"""
input FitnessPlanOrderInput {
  """Orders by the ids of the plans"""
  planIds: [Int]!
}

type Link {
  id: ID

  """The title of what this link is"""
  title: String!
  url: String!
}

type Mutation {
  submitAnswer(input: SubmitAnswerInput!): SubmitAnswerPayload
  subscribeNewsletter(input: SubscribeNewsletterInput!): SubscribeNewsletterPayload
}

interface Node {
  """Global node Id"""
  id: ID
}

interface Plan {
  id: ID
  planId: Int!
  name: String!
  description: String!

  """The resources for this plan, e.g. apps, workouts etc"""
  links: [Link]

  """The days per week to workout for this plan"""
  workoutDaysPerWeek: [Int]

  """The time the workout takes in hours/minutes"""
  timeToWorkout: TimeToWorkout
}

type PlanAnswerPoint {
  id: ID

  """The number of points that the current answer gives for the plan"""
  points: Int!
  fitnessPlan: FitnessPlan
  variationPlan: VariationPlan
}

type Query {
  """Fetches an object given its global Id"""
  node(
    """The global Id of the object"""
    id: ID!
  ): Node
  questionByIndex(
    """The index of the question to get, 0 by default"""
    index: Int = null
  ): Question
  fitnessPlans(
    """The ordering for the fitness plans"""
    order: FitnessPlanOrderInput = null
  ): [FitnessPlan]
}

type Question implements Node {
  """The Id of the Question"""
  questionId: Int!

  """The Global Id of the Question"""
  id: ID!

  """The question to ask the user"""
  questionText: String!

  """The answers for this question"""
  answers: [Answer]
  planAnswerPoints: [PlanAnswerPoint]
}

input SubmitAnswerInput {
  clientMutationId: String = null
  id: Int!
}

type SubmitAnswerPayload {
  clientMutationId: String
  answer: Answer!
}

input SubscribeNewsletterInput {
  clientMutationId: String = null
  email: String!
  recaptcha: String!
}

type SubscribeNewsletterPayload {
  clientMutationId: String
}

type TimeToWorkout {
  """The amount of hours it takes to complete the workout"""
  hours: Int

  """The amount of minutes it takes to complete the workout"""
  minutes: Int
}

type VariationPlan implements Plan {
  id: ID
  planId: Int!
  name: String!
  description: String!

  """The resources for this variation plan, e.g. apps, workouts etc"""
  links: [Link]

  """The days per week to workout for this variation plan"""
  workoutDaysPerWeek: [Int]

  """The time the workout takes in hours/minutes"""
  timeToWorkout: TimeToWorkout

  """The fitness plan that this variation plan is related to."""
  parentFitnessPlan: FitnessPlan
}
