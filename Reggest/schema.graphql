# source: https://localhost:8080/graphql
# timestamp: Sun Apr 15 2018 22:01:22 GMT+0200 (W. Europe Daylight Time)

type Answer implements Node {
  """The Id of the Answer"""
  answerId: Int!

  """The Global Id of the Answer"""
  id: ID!

  """An answer to present to the user"""
  answerText: String

  """The question associated with this answer"""
  question: Question
  fitnessPlanAnswerPoints: [FitnessPlanAnswerPoint]
}

"""
The `Date` scalar type represents a timestamp provided in UTC. `Date` expects
timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

scalar Decimal

type FitnessPlan implements Node {
  """The Id of the FitnessPlan"""
  fitnessPlanId: Int!

  """The Global Id of the FitnessPlan"""
  id: ID!
  name: String!
  description: String!
  link: String!
  fitnessPlanAnswerPoints: [FitnessPlanAnswerPoint]
}

type FitnessPlanAnswerPoint implements Node {
  """The Id of the FitnessPlanAnswerPoint"""
  fitnessPlanAnswerPointId: Int!

  """The Global Id of the FitnessPlanAnswerPoint"""
  id: ID!

  """
  The number of points that the current answer gives for the fitness plan
  """
  points: Int
  answer: Answer
  fitnessPlan: FitnessPlan
}

type Mutation {
  submitAnswer(input: SubmitAnswerInput!): SubmitAnswerPayload
}

interface Node {
  """Global node Id"""
  id: ID
}

type Query {
  """Fetches an object given its global Id"""
  node(
    """The global Id of the object"""
    id: ID!
  ): Node
  question: Question
}

type Question implements Node {
  """The Id of the Question"""
  questionId: Int!

  """The Global Id of the Question"""
  id: ID!

  """The question to ask the user"""
  questionText: String

  """The answers for this question"""
  answers: [Answer]
}

input SubmitAnswerInput {
  clientMutationId: String = null
  id: Int!
}

type SubmitAnswerPayload {
  clientMutationId: String
  answer: Answer!
}
